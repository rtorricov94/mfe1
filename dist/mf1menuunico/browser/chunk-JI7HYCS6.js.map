{
  "version": 3,
  "sources": ["../../../src/app/common/components/loading-bar/loading-bar.component.ts", "../../../src/app/common/components/loading-bar/loading-bar.component.html", "../../../src/app/common/interceptor/loading.interceptor.service.ts"],
  "sourcesContent": ["import { ChangeDetectionStrategy, Component, ViewEncapsulation, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { Subscription, debounceTime } from 'rxjs';\r\nimport { LoadingInterceptorService } from '../../interceptor/loading.interceptor.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-loading-bar',\r\n  standalone: true,\r\n  imports: [CommonModule,MatProgressBarModule],\r\n  templateUrl: './loading-bar.component.html',\r\n  styleUrl: './loading-bar.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LoadingBarComponent {\r\n  isSpinnerVisible: boolean = false;\r\n  loadingSubscription!: Subscription;\r\n\r\n  public loadingService = inject(LoadingInterceptorService);\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    //this.loadingSubscription.unsubscribe();\r\n  }\r\n}\r\n", "<div    *ngIf=\"loadingService.loadingSub | async\">\r\n    <mat-progress-bar mode=\"indeterminate\"  ></mat-progress-bar>\r\n</div>", "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoadingInterceptorService {\r\n  loadingSub = new BehaviorSubject<boolean>(false);\r\n  loadingMap = new Map<string, boolean>();\r\n \r\n  setLoading(state: boolean, url: string) {\r\n     if (state) {\r\n       this.loadingMap.set(url, true);\r\n       this.loadingSub.next(true);\r\n     } else {\r\n       this.loadingMap.delete(url);\r\n       if (this.loadingMap.size === 0) {\r\n         this.loadingSub.next(false);\r\n       }\r\n     }\r\n  }\r\n}\r\n"],
  "mappings": ";AAAA,SAAS,yBAAyB,WAA8B,cAAc;AAC9E,SAAS,oBAAoB;AAC7B,SAAS,4BAA4B;;;AEFrC,SAAS,kBAAkB;AAC3B,SAAS,uBAAgC;;AAKnC,IAAO,4BAAP,MAAO,2BAAyB;EAHtC,cAAA;AAIE,SAAA,aAAa,IAAI,gBAAyB,KAAK;AAC/C,SAAA,aAAa,oBAAI,IAAG;;EAEpB,WAAW,OAAgB,KAAW;AACnC,QAAI,OAAO;AACT,WAAK,WAAW,IAAI,KAAK,IAAI;AAC7B,WAAK,WAAW,KAAK,IAAI;IAC3B,OAAO;AACL,WAAK,WAAW,OAAO,GAAG;AAC1B,UAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,aAAK,WAAW,KAAK,KAAK;MAC5B;IACF;EACH;;;uBAdW,4BAAyB;IAAA;EAAA;;+EAAzB,4BAAyB,SAAzB,2BAAyB,WAAA,YAFxB,OAAM,CAAA;EAAA;;;;;;;;;ADJpB,IAAA,6BAAA,GAAA,KAAA;AACI,IAAA,wBAAA,GAAA,oBAAA,CAAA;AACJ,IAAA,2BAAA;;;ADaM,IAAO,sBAAP,MAAO,qBAAmB;EARhC,cAAA;AASE,SAAA,mBAA4B;AAGrB,SAAA,iBAAiB,OAAO,yBAAyB;;EACxD,WAAQ;EAER;EAEA,cAAW;EAEX;;;uBAXW,sBAAmB;IAAA;EAAA;;6EAAnB,sBAAmB,WAAA,CAAA,CAAA,iBAAA,CAAA,GAAA,YAAA,MAAA,UAAA,CAAA,iCAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,MAAA,GAAA,CAAA,QAAA,eAAA,CAAA,GAAA,UAAA,SAAA,6BAAA,IAAA,KAAA;AAAA,UAAA,KAAA,GAAA;ACfhC,QAAA,yBAAA,GAAA,oCAAA,GAAA,GAAA,OAAA,CAAA;;;;AAAS,QAAA,yBAAA,QAAA,0BAAA,GAAA,GAAA,IAAA,eAAA,UAAA,CAAA;;sBDUG,cAAY,SAAA,cAAC,sBAAoB,iBAAA,GAAA,QAAA,CAAA,iKAAA,GAAA,iBAAA,EAAA,CAAA;EAAA;;;iFAKhC,qBAAmB,EAAA,WAAA,uBAAA,UAAA,uEAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
